package cn.com.tsjx.common.util;

import java.math.BigDecimal;

/**
 * Created by IntelliJ IDEA.
 * User: bxl
 * Date: 2010-1-6
 * Time: 15:39:44
 * To change this template use File | Settings | File Templates.
 */
public class UtilGPS {
    /**
     * 两点之间直线点距离（米）
     *
     * @param lng1
     * @param lat1
     * @param lng2
     * @param lat2
     * @return
     */
    public static double getDistance(double lng1, double lat1, double lng2, double lat2) {
        double EARTH_RADIUS = 6378.137;
        double radLat1 = lat1 * Math.PI / 180.0;
        double radLat2 = lat2 * Math.PI / 180.0;
        double a = radLat1 - radLat2;
        double b = (lng1 * Math.PI / 180.0) - (lng2 * Math.PI / 180.0);
        double s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));
        s = s * EARTH_RADIUS * 1000;
        return s;
    }

    /**
     * 计算2gps点距离（米）
     *
     * @param lng1
     * @param lat1
     * @param lng2
     * @param lat2
     * @return
     */
    public static double getGpsLong(double lng1, double lat1, double lng2, double lat2) {
        return 108 * Math.sqrt((Math.pow((lng1 - lng2), 2) + Math.pow((lat1 - lat2), 2))) * 1000;
    }


    /***
     * 轨迹长度（米）
     * @param lonlat
     * @return
     */
    public static double getGpsStringLong(String lonlat) {
        String[] point = lonlat.split(";");
        double count = 0;
        if (point.length > 0) {
            String[] lt = point[0].split(",");
            double lon1 = Double.valueOf(lt[0]);
            double lat1 = Double.valueOf(lt[1]);
            for (int i = 0; i < point.length; i++) {
                lt = point[i].split(",");
                double lon2 = Double.valueOf(lt[0]);
                double lat2 = Double.valueOf(lt[1]);
                //   System.out.println("count="+count+" "+(getGpsStringLong(lon1, lat1, lon2, lat2)));
                count += getGpsLong(lon1, lat1, lon2, lat2);
                lon1 = lon2;
                lat1 = lat2;

            }
        }
        return count;
    }

    /**
     * 截取2个GPS点在公交GPS点串
     *
     * @param lonlat
     * @param plon1
     * @param plat1
     * @param plon2
     * @param plat2
     * @return
     */
    public static String getGPS(String lonlat, double plon1, double plat1, double plon2, double plat2) {
        String[] point = lonlat.split(";");
        int x1 = query(point, plon1, plat1);
        int x2 = query(point, plon2, plat2);
        StringBuilder str = new StringBuilder("");
        if (x1 > x2) {
            for (int i = x1; i >= x2; i--) {
                str.append(point[i]);
                if (i > x2) {
                	str.append(";");
                }
            }
        } else {
            for (int i = x1; i <= x2; i++) {
            	str.append(point[i]);
                if (i < x2) {
                	str.append(";");
                }

            }
        }
        return str.toString();
    }


    /**
     * 找出最近点位置
     *
     * @param point 经纬度字符串
     * @param plon1 经度
     * @param plat1 纬度
     * @return 在字符中的数组位置
     */
    public static int query(String[] point, double plon1, double plat1) {
        double x1 = 0;
        int ret = 0;
        for (int i = 0; i < point.length; i++) {
            String[] lt = point[i].split(",");
            if(lt!=null&&lt.length==2){
            double str1 = getDistance(plon1, plat1, Double.valueOf(lt[0]), Double.valueOf(lt[1])) * 100;
            if (i == 0) x1 = str1;
            if (str1 < x1) {
                ret = i;
                x1 = str1;
            }
            }
        }
        return ret;
    }
    
    /**
     * 找出最近点
     *
     * @param point 经纬度字符串
     * @param plon1 经度
     * @param plat1 纬度
     * @return 在字符中的数组位置
     */
    public static String[] getGPSpoint(String[] point, double plon1, double plat1) {
        double x1 = 0;
        int ret = 0;
        for (int i = 0; i < point.length; i++) {
            String[] lt = point[i].split(",");
            if(lt!=null&&lt.length==2){
            double str1 = getDistance(plon1, plat1, Double.valueOf(lt[0]), Double.valueOf(lt[1])) * 100;
            if (i == 0) x1 = str1;
            if (str1 < x1) {
                ret = i;
                x1 = str1;
            }    
            }
        }
        return point[ret].split(",");
    }

    public static double round(double v, int scale) {
        if (scale < 0) {
            throw new IllegalArgumentException("The scale must be a positive integer or zero");
        }
        BigDecimal b = new BigDecimal(Double.toString(v));
        BigDecimal one = new BigDecimal("1");
        return b.divide(one, scale, BigDecimal.ROUND_HALF_UP).doubleValue();
    }
    
    public static void main(String[] args) {
       // String lonlat = "120.157560000000,30.272621000000;120.157528000000,30.273624000000;120.157455000000,30.274746000000;120.157434000000,30.275596000000;120.157434000000,30.275596000000;120.159573000000,30.275753000000;120.159573000000,30.275753000000;120.160364000000,30.275899000000;120.160456000000,30.275908000000;120.160863000000,30.275941000000;120.161274000000,30.275971000000;120.161498000000,30.275981000000;120.161694000000,30.275977000000;120.161712000000,30.275978000000;120.161721000000,30.275978000000;120.161741000000,30.275980000000;120.161741000000,30.275980000000;120.162952000000,30.276111000000;120.163645000000,30.276185000000;120.163664000000,30.276187000000;120.163673000000,30.276187000000;120.164315000000,30.276238000000;120.164324000000,30.276238000000;120.164911000000,30.276298000000;120.164926000000,30.276300000000;120.164938000000,30.276301000000;120.164943000000,30.276301000000;120.165260000000,30.276325000000;120.165878000000,30.276381000000;120.165878000000,30.276381000000;120.165529000000,30.279204000000;120.165438000000,30.279622000000;120.165438000000,30.279622000000;120.164918000000,30.282024000000;120.164461000000,30.284080000000;120.164461000000,30.284080000000;120.163668000000,30.283987000000;120.161951000000,30.283663000000;120.160788000000,30.283434000000;120.160788000000,30.283434000000;120.160778000000,30.283470000000;120.160776000000,30.283475000000;120.160770000000,30.283498000000;120.160752000000,30.283538000000;120.160709000000,30.283600000000;120.160660000000,30.283661000000;120.160610000000,30.283725000000;120.160406000000,30.283953000000;120.160365000000,30.283994000000;120.159930000000,30.284536000000;120.159782000000,30.284718000000;120.159008000000,30.285667000000;120.158631000000,30.286159000000;120.158394000000,30.286466000000;120.158132000000,30.286778000000;120.157876000000,30.287104000000;120.157662000000,30.287375000000;120.157600000000,30.287454000000;120.157270000000,30.287842000000;120.157136000000,30.288009000000;120.156846000000,30.288370000000;120.156842000000,30.288375000000;120.156435000000,30.288862000000;120.156235000000,30.289121000000;120.156167950104,30.289204175773;120.156167950104,30.289204175773;120.156156000000,30.289219000000;120.155803000000,30.289642000000;120.155730000000,30.289730000000;120.154873000000,30.290787000000;120.154751000000,30.290962000000;120.154750000000,30.290962000000;120.154750000000,30.290962000000;120.154747000000,30.290962000000;120.152991000000,30.290152000000;120.152251000000,30.289791000000;120.152251000000,30.289791000000;120.152018000000,30.289704000000;120.150699000000,30.289122000000;120.147457000000,30.287592000000;120.147052000000,30.287401000000;120.147039000000,30.287396000000;120.147039000000,30.287396000000;120.146783000000,30.287855000000;120.146568000000,30.288244000000;120.146438000000,30.288545000000;120.146199000000,30.289121000000;120.145823000000,30.289976000000;120.145508000000,30.290675000000;120.145508000000,30.290675000000;120.145444000000,30.290805000000;120.145348000000,30.290958000000;120.145069000000,30.291422000000;120.144755000000,30.291926000000;120.144400000000,30.292509000000;120.144203000000,30.292807000000;120.144203000000,30.292807000000;120.140335000000,30.291271000000;120.140335000000,30.291271000000;120.140262000000,30.291443000000;120.140255000000,30.291458000000;120.140210000000,30.291558000000;120.140059000000,30.291890000000;120.139797000000,30.292466000000;120.139614000000,30.292958000000;120.139433000000,30.293343000000;120.139357000000,30.293481000000;120.139247000000,30.293678000000;120.139114000000,30.293808000000;120.138887000000,30.294026000000;120.138641000000,30.294251000000;120.138261000000,30.294556000000;120.138022000000,30.294727000000;120.137693000000,30.294964000000;120.137346000000,30.295187000000;120.137037000000,30.295427000000;120.136965000000,30.295504000000;120.136928000000,30.295544000000;120.136819000000,30.295661000000;120.136666000000,30.295854000000;120.136666000000,30.295854000000;120.136415000000,30.296219000000;120.136352000000,30.296364000000;120.136352000000,30.296364000000;120.136315000000,30.296483000000;120.136293000000,30.296565000000;120.136246000000,30.296747000000;120.136196000000,30.296835000000;120.136196000000,30.296835000000;120.135993000000,30.297194000000;120.135763000000,30.297648000000;120.135497000000,30.298102000000;120.135472000000,30.298135000000;120.135204000000,30.298484000000;120.134965000000,30.298747000000;120.134895000000,30.298813000000;120.134895000000,30.298813000000;120.134763000000,30.298938000000;120.134488000000,30.299177000000;120.134212000000,30.299384000000;120.133735000000,30.299734000000;120.131220000000,30.301422000000;120.130736000000,30.301749000000;120.130736000000,30.301749000000;120.130733000000,30.301751000000;120.129179000000,30.302803000000;120.129065000000,30.302884000000;120.127893000000,30.303719000000;120.127803000000,30.303782000000;120.127339000000,30.304100000000;120.125438000000,30.305391000000;120.125149299952,30.305585550185;120.125149299952,30.305585550185;120.123914000000,30.306418000000;120.123303000000,30.306832000000;120.123303000000,30.306832000000;120.121897000000,30.307786000000;120.121518000000,30.308044000000;120.121253000000,30.308224000000;120.120940000000,30.308437000000;120.120267000000,30.308945000000;120.120232000000,30.308972000000;120.120232000000,30.308972000000;120.119787362562,30.309306247436;120.119787362562,30.309306247436;120.119221000000,30.309732000000;120.117668000000,30.310767000000;120.117553000000,30.310849000000;120.117388000000,30.310958000000;120.115963000000,30.311876000000;120.115716000000,30.312037000000;120.115405000000,30.312266000000;120.115077000000,30.312501000000;120.114414000000,30.312976000000;120.113350000000,30.313680000000;120.112585000000,30.314196000000;120.112289000000,30.314378000000;120.111850000000,30.314678000000;120.111709000000,30.314775000000;120.111163000000,30.315150000000;120.110616000000,30.315522000000;120.110616000000,30.315522000000;120.110426000000,30.315680000000;120.109881000000,30.316166000000;120.109834000000,30.316212000000;120.109414000000,30.316622000000;120.109338000000,30.316707000000;120.108730000000,30.317438000000;120.108224000000,30.318047000000;120.108028000000,30.318249000000;120.107528000000,30.318753000000;120.107268000000,30.319045000000;120.107084000000,30.319253000000;120.106646000000,30.319750000000;120.106645000000,30.319751000000;120.106645000000,30.319751000000;120.106387000000,30.320043000000;120.106311000000,30.320130000000;120.106254000000,30.320194000000;120.105586000000,30.320940000000;120.105388000000,30.321160000000;120.105289000000,30.321271000000;120.104700000000,30.321936000000;120.104284000000,30.322405000000;120.103676000000,30.323224000000;120.103170000000,30.324207000000;120.103096000000,30.324547000000;120.103096000000,30.324547000000;120.102846000000,30.325278000000;120.102569000000,30.326418000000;120.102540000000,30.326550000000;120.102521000000,30.326639000000;120.102351000000,30.327429000000;120.102312000000,30.327612000000;120.101920000000,30.329197000000;120.101898000000,30.329274000000;120.101760000000,30.329754000000;120.101760000000,30.329754000000;120.101760000000,30.329754000000;120.101703000000,30.329952000000;120.101508000000,30.330402000000;120.101422000000,30.330606000000;120.101422000000,30.330606000000;120.101319000000,30.330853000000;120.100737000000,30.332013000000;120.100642000000,30.332203000000;120.100533000000,30.332411000000;120.100350000000,30.332776000000;120.100149000000,30.333170000000;120.099869000000,30.333697000000;120.099544000000,30.334209000000;120.099403000000,30.334366000000;120.099403000000,30.334366000000;120.099202000000,30.334589000000;120.098586000000,30.335251000000;120.098076000000,30.335773000000;120.097972000000,30.335874000000;120.097646000000,30.336200000000;120.096959000000,30.336982000000;120.096575000000,30.337436000000;120.096323000000,30.337734000000;120.096148000000,30.337962000000;120.096049000000,30.338092000000;120.095055000000,30.339221000000;120.094660000000,30.339670000000;120.094455000000,30.339906000000;120.093756000000,30.340605000000;120.093442000000,30.340954000000;120.092843000000,30.341808000000;120.092031000000,30.343178000000;120.092031000000,30.343178000000;120.091316000000,30.344384000000;120.090600000000,30.345281000000;120.088821000000,30.347547000000;120.086806000000,30.350131000000;120.084876000000,30.352385000000;120.083623000000,30.353584000000;120.080988000000,30.355990000000;120.076353206593,30.360193424968;120.076353206593,30.360193424968;120.077091158974,30.360452079317";
        double plon1 = 120.141843;    //一清新村
        double plat1 = 30.291714;

        double plon2 = 120.15284;      //朝晖九区
        double plat2 = 30.289961;
      //  System.out.println(getGpsLong(120.092831,30.143404,120.1605828000000000000000000000000,30.24271112));
       // System.out.println(getGPS(lonlat, plon1, plat1, plon2, plat2));
        System.out.println(getDistance( plon1, plat1,plon2, plat2));
        
        System.out.println(UtilGPS.getDistance(120.171165, 30.252835,120.169883333333,30.2599666666667));
    }

}
